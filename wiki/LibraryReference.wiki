#summary A brief introduction to how to use Passpack Hosti-Proof Hosting JS Library

= Installation =

Simply, put into your HTML code the following line:

{{{<script type="text/javascript" src="passpack.js"></script>}}}


= Reference =

== Passpack.encode(_algorithm_,_plaintext_[,_key_,_optionalPars_]) ==

To encode the string {{{str}}} with the key {{{mykey}}} using AES 256-bit use:

{{{Passpack.encode("AES",str,mykey)}}}

By default the result of the encryption is Base64-encoded. To change default settings you can use _optionalPars_. They must be as the following:
{{{
  {
    nbits:  128,
    escape: true
  }
}}}

For example, to encode the string {{{str}}} using AES 192-bit, without Base64 encoding you have to run:

{{{
Passpack.encode("AES",str,mykey,{
  nbits:    128,
  noBase64: true
});
}}}

*Supported algorythm:*

 * UTF8
 * Base64+ (this replace all '+' with '!' to avoid problems with post XMLHTTPRequest)
 * AES (128, 192 or 256-bit)
 * xxTEA
 * RC4

*Optional parameters:*

 * _nbits_ : number of bits, if applicably
 * _noBase64_ : disable Base64 encoding of encrypted string
 * _escape_ : escape the encrypted string (after Base64 encoding)

==== Passpack.UTF8 and Passpack.Base64 are based on Utf8 and Base64 scripts by WebToolkit.
Passpack.AES and Passpack.xxTEA are based on Chris Veness's AES and BlockTEA implementations. ====


== Passpack.decode(_algorithm_,_plaintext_[,_key_,_optionalPars_]) ==

It works similarly to _encode_. Optional pars are the same except:

 * _unescape_ - Unescape encryptedText before decrypt it.

== Passpack.JSON.parse ==

The Passpack.JSON static object is a variation of the Douglas Crockford JSON object defined in json2.js library. The _parse_ method adds to original method the automatical conversion of date strings in ISO format to Date objects. To parse a JSON string:

{{{Passpack.JSON.parse(jsonStr);}}}